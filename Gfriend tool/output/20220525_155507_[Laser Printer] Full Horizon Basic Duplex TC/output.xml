<?xml version="1.0" encoding="UTF-8"?>
<TestSuite Name="[Laser Printer] Full Horizon Basic Duplex TC">
  <StartTime>
2022-05-25 15:55:31
</StartTime>
  <TestCase Name="Always Show Before Printing : Check">
    <StartTime>
2022-05-25 15:55:31
</StartTime>
    <Repeat RepeatCount="1">
      <StartTime>
2022-05-25 15:55:31
</StartTime>
      <Loop LoopCount="1">
        <StartTime>
2022-05-25 15:55:31
</StartTime>
        <Statement StatementName="Destination_Selection_Application.Destination Selection_CheckAlwaysShowBeforePrinting">
          <StartTime>
2022-05-25 15:55:31
</StartTime>
          <StartTime>
2022-05-25 15:55:31
</StartTime>
          <Statement StatementName="Hallasan.Open File For Print (C:\GFriend_PotG\Potg_Driver\PotG Testfile\YMC_CheckAlwaysShowBeforePrinting.pdf,HP Smart Printing)">
            <StartTime>
2022-05-25 15:55:31
</StartTime>
            <Result>
Pass
</Result>
            <EndTime>
2022-05-25 15:56:01
</EndTime>
          </Statement>
          <Statement StatementName="Hallasan.Get Driver Window(HP Smart Printing)">
            <StartTime>
2022-05-25 15:56:01
</StartTime>
            <Result>
Pass
</Result>
            <EndTime>
2022-05-25 15:56:01
</EndTime>
          </Statement>
          <Statement StatementName="Windows.Wait For Name (HP Smart Printing,30)">
            <StartTime>
2022-05-25 15:56:01
</StartTime>
            <Result>
Pass
</Result>
            <EndTime>
2022-05-25 15:56:01
</EndTime>
          </Statement>
          <Statement StatementName="Sleep(6)">
            <StartTime>
2022-05-25 15:56:01
</StartTime>
            <Result>
Pass
</Result>
            <EndTime>
2022-05-25 15:56:07
</EndTime>
          </Statement>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:56:07
</EndTime>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:56:07
</EndTime>
        </Statement>
        <Statement StatementName="Used_Destination_Selection_Function.not Used Destination Selection Function">
          <StartTime>
2022-05-25 15:56:07
</StartTime>
          <StartTime>
2022-05-25 15:56:07
</StartTime>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:56:07
</EndTime>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:56:07
</EndTime>
        </Statement>
        <Statement StatementName="Windows.Capture Screen Shot(Capture.jpg)">
          <StartTime>
2022-05-25 15:56:07
</StartTime>
          <Result>
Pass
</Result>
          <ScreenShot>
.\Windows_Screenshot_220525_15560796.png
</ScreenShot>
          <EndTime>
2022-05-25 15:56:07
</EndTime>
        </Statement>
        <Statement StatementName="Sleep(5)">
          <StartTime>
2022-05-25 15:56:07
</StartTime>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:56:13
</EndTime>
        </Statement>
        <Statement StatementName="Hallasan.Confirm">
          <StartTime>
2022-05-25 15:56:13
</StartTime>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:56:13
</EndTime>
        </Statement>
        <Statement StatementName="Sleep(5)">
          <StartTime>
2022-05-25 15:56:13
</StartTime>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:56:18
</EndTime>
        </Statement>
        <Statement StatementName="Click_Print_Button.Print">
          <StartTime>
2022-05-25 15:56:18
</StartTime>
          <StartTime>
2022-05-25 15:56:18
</StartTime>
          <Statement StatementName="Hallasan.Click Print Button">
            <StartTime>
2022-05-25 15:56:18
</StartTime>
            <Result>
Pass
</Result>
            <EndTime>
2022-05-25 15:56:20
</EndTime>
          </Statement>
          <Statement StatementName="Sleep(20)">
            <StartTime>
2022-05-25 15:56:20
</StartTime>
            <Result>
Pass
</Result>
            <EndTime>
2022-05-25 15:56:40
</EndTime>
          </Statement>
          <If Condition=" Hallasan.Close Application">
            <StartTime>
2022-05-25 15:56:40
</StartTime>
            <ConditionResult>
ERROR
</ConditionResult>
            <ErrorDescription>
Unexpected exception
</ErrorDescription>
            <AdditionalInfo>
System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.Windows.Automation.ElementNotAvailableException: Element not available ---&gt; System.Runtime.InteropServices.COMException: An event was unable to invoke any of the subscribers (Exception from HRESULT: 0x80040201)
   at UIAutomationClient.IUIAutomationElement.GetCurrentPattern(Int32 patternId)
   at System.Windows.Automation.AutomationElement.TryGetCurrentPattern(AutomationPattern pattern, Object&amp; patternObject)
   --- End of inner exception stack trace ---
   at System.Windows.Automation.AutomationElement.TryGetCurrentPattern(AutomationPattern pattern, Object&amp; patternObject)
   at HP.GFriend.Keywords.ApplicationUtils.CloseApplication() in C:\Jenkins\workspace\Build_And_Release_GFriend_Official\GFLibraries\GFK.Windows\ApplicationUtils.cs:line 104
   at HP.GFriend.Keywords.Windows.CloseApplication() in C:\Jenkins\workspace\Build_And_Release_GFriend_Official\GFLibraries\GFK.Windows\Windows.cs:line 926
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at System.RuntimeType.InvokeMember(String name, BindingFlags bindingFlags, Binder binder, Object target, Object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParams)
   at HP.GFriend.Core.Execution.Executor.Execute(Statement aStatement, TestDataManager testDataManager, Int32 repeat, Int32 stackLevel, Dictionary`2 arguments)
</AdditionalInfo>
            <StatementBlock Kind="ERROR">
              <StartTime>
2022-05-25 15:56:40
</StartTime>
              <Block>
                <StartTime>
2022-05-25 15:56:40
</StartTime>
                <Result>
PASS
</Result>
                <EndTime>
2022-05-25 15:56:40
</EndTime>
              </Block>
              <EndTime>
2022-05-25 15:56:40
</EndTime>
              <Result>
PASS
</Result>
            </StatementBlock>
            <Result>
PASS
</Result>
            <EndTime>
2022-05-25 15:56:40
</EndTime>
          </If>
          <Statement StatementName="Sleep(20)">
            <StartTime>
2022-05-25 15:56:40
</StartTime>
            <Result>
Pass
</Result>
            <EndTime>
2022-05-25 15:57:00
</EndTime>
          </Statement>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:57:00
</EndTime>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:57:00
</EndTime>
        </Statement>
        <Statement StatementName="Windows.Wait For ID (PrintingToDialog.ui_ContentFrame.ui_AlwaysDisplay,10)">
          <StartTime>
2022-05-25 15:57:00
</StartTime>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:57:00
</EndTime>
        </Statement>
        <Statement StatementName="Windows.Click ID(PrintingToDialog.ui_ContentFrame.ui_AlwaysDisplay)">
          <StartTime>
2022-05-25 15:57:00
</StartTime>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:57:00
</EndTime>
        </Statement>
        <Statement StatementName="Windows.Wait For ID (PrintingToDialog.ui_ContentFrame.OpenHelpWindowButton,10)">
          <StartTime>
2022-05-25 15:57:00
</StartTime>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:57:00
</EndTime>
        </Statement>
        <Statement StatementName="Windows.Click ID(PrintingToDialog.ui_ContentFrame.OpenHelpWindowButton)">
          <StartTime>
2022-05-25 15:57:00
</StartTime>
          <Result>
Fail
</Result>
          <ErrorDescription>
Can not find element with given automation ID : PrintingToDialog.ui_ContentFrame.OpenHelpWindowButton
</ErrorDescription>
          <ScreenShot>
.\Windows_Screenshot_220525_15570054.png
</ScreenShot>
          <EndTime>
2022-05-25 15:57:00
</EndTime>
        </Statement>
        <Statement StatementName="Windows.Wait For ID (HelpContentDialog.ui_CheckShowAlways,10)">
          <StartTime>
2022-05-25 15:57:00
</StartTime>
          <Result>
Fail
</Result>
          <ErrorDescription>
Can not find element with given automation ID : HelpContentDialog.ui_CheckShowAlways
</ErrorDescription>
          <ScreenShot>
.\Windows_Screenshot_220525_15571100.png
</ScreenShot>
          <EndTime>
2022-05-25 15:57:11
</EndTime>
        </Statement>
        <Statement StatementName="Windows.Click ID(HelpContentDialog.ui_CheckShowAlways)">
          <StartTime>
2022-05-25 15:57:11
</StartTime>
          <Result>
Fail
</Result>
          <ErrorDescription>
Can not find element with given automation ID : HelpContentDialog.ui_CheckShowAlways
</ErrorDescription>
          <ScreenShot>
.\Windows_Screenshot_220525_15571417.png
</ScreenShot>
          <EndTime>
2022-05-25 15:57:14
</EndTime>
        </Statement>
        <Statement StatementName="Windows.Wait For ID (PrintingToDialog.ui_ContentFrame.PrintButton,10)">
          <StartTime>
2022-05-25 15:57:14
</StartTime>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:57:14
</EndTime>
        </Statement>
        <Statement StatementName="Windows.Click ID(PrintingToDialog.ui_ContentFrame.PrintButton)">
          <StartTime>
2022-05-25 15:57:14
</StartTime>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:57:14
</EndTime>
        </Statement>
        <Statement StatementName="Destination_Selection_Application.PT Value_CheckAlwaysShowBeforePrinting">
          <StartTime>
2022-05-25 15:57:14
</StartTime>
          <StartTime>
2022-05-25 15:57:14
</StartTime>
          <Statement StatementName="XML.Load From File (C:\temp\H_JobSetup_OutPT.xml)">
            <StartTime>
2022-05-25 15:57:14
</StartTime>
            <Result>
Pass
</Result>
            <EndTime>
2022-05-25 15:57:14
</EndTime>
          </Statement>
          <Statement StatementName="XML.Get Attribute (${value},//*[@name='ns0000:JobStatusMonitor']/psf:Option,name)">
            <StartTime>
2022-05-25 15:57:14
</StartTime>
            <Result>
Pass
</Result>
            <Output>
ns0000:On
</Output>
            <EndTime>
2022-05-25 15:57:14
</EndTime>
          </Statement>
          <Statement StatementName="Equals (${value},ns0000:On)">
            <StartTime>
2022-05-25 15:57:14
</StartTime>
            <Result>
Pass
</Result>
            <EndTime>
2022-05-25 15:57:14
</EndTime>
          </Statement>
          <Statement StatementName="XML.Get Attribute (${value},//*[@name='ns0000:JobTelemetryUserOption']/psf:Option,name)">
            <StartTime>
2022-05-25 15:57:14
</StartTime>
            <Result>
Pass
</Result>
            <Output>
ns0000:OptOut
</Output>
            <EndTime>
2022-05-25 15:57:14
</EndTime>
          </Statement>
          <Statement StatementName="Equals (${value},ns0000:OptOut)">
            <StartTime>
2022-05-25 15:57:14
</StartTime>
            <Result>
Pass
</Result>
            <EndTime>
2022-05-25 15:57:14
</EndTime>
          </Statement>
          <Statement StatementName="Run Command(cmd /c copy c:\temp\H_JobSetup_OutPT.xml &quot;${OUTPUT_FOLDER}&quot;,${commandOutput},5)">
            <StartTime>
2022-05-25 15:57:14
</StartTime>
            <Result>
Pass
</Result>
            <Output>
        1 file(s) copied.

</Output>
            <EndTime>
2022-05-25 15:57:14
</EndTime>
          </Statement>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:57:14
</EndTime>
          <Result>
Pass
</Result>
          <EndTime>
2022-05-25 15:57:14
</EndTime>
        </Statement>
        <Result>
FAIL
</Result>
        <EndTime>
2022-05-25 15:57:14
</EndTime>
      </Loop>
      <Result>
FAIL
</Result>
      <EndTime>
2022-05-25 15:57:14
</EndTime>
    </Repeat>
    <Result>
FAIL
</Result>
    <EndTime>
2022-05-25 15:57:14
</EndTime>
  </TestCase>
  <EndTime>
2022-05-25 15:57:14
</EndTime>
</TestSuite>